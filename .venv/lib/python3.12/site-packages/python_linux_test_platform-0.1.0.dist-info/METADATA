Metadata-Version: 2.4
Name: python-linux-test-platform
Version: 0.1.0
Summary: A modern Linux/Python test automation platform with mock, serial, and SSH rough-in backends.
Author: Baisen Su
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: pyserial>=3.5
Requires-Dist: rich>=13.0.0
Requires-Dist: paramiko>=3.4.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: build>=1.2.1; extra == "dev"
Requires-Dist: twine>=4.0.2; extra == "dev"

# python_linux_test_platform

A clean, installable **Linux/Python test automation platform**:
- Modular architecture (transport abstraction, checkers, reporting)
- Interactive CLI shell (`botdiags`) + automated runner (`botdiags-runner`)
- Per-UUT artifacts: `report.json`, `report.csv`, `live.log`
- **Rough-in backends** for SSH prompt and Serial prompt shells (like a `Diags$` device)

## Quick start (dev mode)

python3 -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
pytest -q

Run demos:
botdiags-runner
demo-showcase
botdiags

Artifacts appear under:
./results/<UUT_ID>/<SESSION>/{report.json, report.csv, live.log}

Use different backends (rough-in):
These are rough-in implementations to show structure. They require a real device.

Serial prompt (e.g., RS-232 debug shell with a prompt like Diags$ ):
botdiags --mode serial_prompt --port /dev/ttyUSB0 --baud 115200 --prompt "Diags\\$ "

SSH prompt (device exposes interactive diagnostics shell after login):
botdiags --mode ssh_prompt --host 192.168.1.50 --user diag --password secret \
         --prompt "Diags\\$ "

Tip: Put credentials in env vars instead of CLI:
export DIAG_PASS=secret and run botdiags --mode ssh_prompt --host ... --user ...

Build a wheel (like a LabVIEW installer):
pip install build
python -m build
# dist/python_linux_test_platform-0.1.0-py3-none-any.whl

Install on a clean machine:
python -m venv testenv
source testenv/bin/activate
pip install dist/*.whl
botdiags-runner

Architecture:
serial_talker.py – unified API returning (status, output) with modes:
    mock (default): simulated DUT (safe for tests/demo)
    serial (line-based serial, expects "STATUS|payload")
    serial_prompt (rough-in): interactive prompt over serial
    ssh_prompt (rough-in): interactive prompt over SSH (Paramiko)
report.py – in-memory log + CSV/JSON export + live.log streaming
checkers.py – numeric range validators
shell.py – interactive CLI (botdiags$)
test_runner.py – runs a smoke sequence and writes artifacts

Tests:
Mock-only unit tests:
    pytest -q
They validate:
    basic talker commands (mock)
    checkers
    report export
    shell save command
    Backends are not unit-tested to avoid requiring hardware/hosts.

## Project Documentation
- [SPEC.md](SPEC.md) — Software Requirements Specification
- [ARCHITECTURE.md](ARCHITECTURE.md) — Modules & diagrams
- [CONTRIBUTING.md](CONTRIBUTING.md) — How to work on this repo
- [SECURITY.md](SECURITY.md) — Credentials & reporting
